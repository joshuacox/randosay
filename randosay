#!/usr/bin/env zsh
fortune_exists=0
cowsay_exists=0
ponysay_exists=0
lolcat_exists=0

if [[ $1 == '--debug' ]]; then
: ${DEBUG:=1}
else
: ${DEBUG:=0}
fi

horizontal_rule () {
  rulez=( '!' '@' '\#' '-' '>' '<' '.' '_' '^' '*' '%' )
  rulez+=( '_' '-' '~' '=' ':' '"' 'w' 'W' 'v' '^' 'V' 'm' 'M' 'n' 'N' 'U' )
  rulez+=( '!' '@' '\#' '$' '-' '>' '<' '.' '_' '^' '*' '%' '.' ',' '?' '+' )
  rulez+=( '!' '@' '\#' '$' '-' '>' '<' '.' '_' '^' '*' '%' )
  rulez+=( '!' '@' '\#' '$' '%' '^' '&' '*' '(' ')' '[' ']' '{' '}' '|' )
  rulez+=( '!' '@' '\#' '$' '-' '>' '<' '.' '_' '^' '*' '%' '.' ',' '?' '+' )
  rulez+=( '1' '2' '3' '4' '5' '6' '7' '8' '9' '0' )
  rulez+=( 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' )
  rulez+=( 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' )
  selected_rule=${rulez[$RANDOM % ${#rulez[@]} ]}
  if [[ -z $selected_rule ]]; then
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
  else
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "$selected_rule"
  fi
}

randomCow_opt () {
  expressions=("-b" "-d" "-g" "-p" "-s" "-t" "-w" "-y")
  selectedexpression=${expressions[$RANDOM % ${#expressions[@]} ]}
}
randomPony_opt () {
  expressions=( "ascii" "cowsay" "linux-vt" "round" "unicode")
  selectedexpression=${expressions[$RANDOM % ${#expressions[@]} ]}
}
randomPonyThink_opt () {
  expressions=( "ascii" "cowsay" "unicode")
  selectedexpression=${expressions[$RANDOM % ${#expressions[@]} ]}
}

randomCow () {
  randomCow_opt
  integer zcow=3
  RANDORcow=$[RANDOM % zcow + 1]
  if [[ $RANDORcow == 1 ]]; then
    if [[ $DEBUG > 0 ]]; then
      echo "fortune -a |cowsay $selectedexpression"
    fi
    fortune -a |cowsay $selectedexpression 2>/dev/null
  elif [[ $RANDORcow == 2 ]]; then
    if [[ $DEBUG > 0 ]]; then
      echo "fortune -a |cowthink $selectedexpression"
    fi
    fortune -a |cowthink $selectedexpression 2>/dev/null
  else
    fortune -a |ponysay 2>/dev/null
  fi
}

randomCow_full () {
  fortune -a \
  | fmt -80 -s \
  | $(shuf -n 1 -e cowsay cowthink) -$(shuf -n 1 -e b d g p s t w y) -f $(shuf -n 1 -e $(cowsay -l \
  | tail -n +2)) -n
}

randomPony () {
  integer zpony=3
  RANDORpony=$[RANDOM % zpony + 1]
  if [[ $RANDORpony == 1 ]]; then
    randomPony_opt
    if [[ -z $selectedexpression ]]; then
      fortune -a -s|ponysay
    else
      fortune -a -s|ponysay -b $selectedexpression 2>/dev/null
    fi
    if [[ $DEBUG > 0 ]]; then
      echo -n "randomPony1 - "
      echo "fortune -a|ponysay -b $selectedexpression"
    fi
  elif [[ $RANDORpony == 2 ]]; then
    randomPonyThink_opt
    if [[ -z $selectedexpression ]]; then
      fortune -a -s|ponythink 2>/dev/null
      if [[ $DEBUG > 0 ]]; then
        echo "fortune -a -s|ponythink"
      fi
    else
      fortune -a -s|ponythink -b $selectedexpression 2>/dev/null
      if [[ $DEBUG > 0 ]]; then
        echo "fortune -a -s|ponythink -b $selectedexpression"
      fi
    fi
  else
    fortune -a -s|ponysay 2>/dev/null
    if [[ $DEBUG > 0 ]]; then
      echo "fortune -a -s|ponysay"
    fi
  fi
}

fortune_all () {
  fortune -a
}

fortune_cowthink () {
  # having issues with pm files
  #fortune -a | cowthink -f $(find /usr/share/cows -type f | shuf -n 1)
  fortune -a | cowthink -f $(find /usr/share/cows -type f -iname '*.cow' | shuf -n 1)
}

fortune_lolcat () {
  fortune -a |lolcat 2>/dev/null
}

test_speakers () {
  if command -v fortune > /dev/null; then
    if [[ $DEBUG > 10 ]]; then
      echo fortune exists
    fi
    fortune_exists=1
  fi
  if command -v cowsay > /dev/null; then
    if [[ $DEBUG > 10 ]]; then
      echo cowsay exists
    fi
    cowsay_exists=1
  fi
  if command -v ponysay > /dev/null; then
    if [[ $DEBUG > 10 ]]; then
      echo ponysay exists
    fi
    ponysay_exists=1
  fi
  if command -v lolcat > /dev/null; then
    if [[ $DEBUG > 10 ]]; then
      echo  lolcat exists
    fi
    lolcat_exists=1
  fi
}

rando () {
  test_speakers
  if [[ $DEBUG > 10 ]]; then
    echo test_speakers
    echo ponysay_exists=$ponysay_exists
    echo cowsay_exists=$cowsay_exists
    echo lolcat_exists=$lolcat_exists
    echo fortune_exists=$fortune_exists
  fi
  if [[ $ponysay_exists ]]; then
    cmd_array+=("randomPony")
  fi
  if [[ $cowsay_exists ]]; then
    cmd_array+=("randomCow")
  fi
  if [[ $fortune_exists && $cowsay_exists ]]; then
    cmd_array+=("fortune_cowthink")
  fi
  if [[ $fortune_exists && $lolcat_exists ]]; then
    cmd_array+=("fortune_lolcat")
  fi
  if [[ $fortune_exists ]]; then
    cmd_array+=("fortune_all")
  fi
  print_all () {
    for value in "${cmd_array[@]}"
    do
      echo $value
    done
  }
  #print_all
  #export RUNNR=${cmd_array[ $RANDOM % ${#cmd_array[@]} ]}
  export RUNNR=${cmd_array[ $RANDOM % ${#cmd_array[@]} + 1 ]}
  #$RUNNR
  if [[ -z $RUNNR ]]; then
    fortune_all
    if [[ $DEBUG > 0 ]]; then
      echo EMPTY
    fi
  else
    $RUNNR
    #randomPony
    if [[ $DEBUG > 0 ]]; then
      echo $RUNNR
      echo DEBUG=$DEBUG
    fi
  fi
}

horizontal_rule
rando
horizontal_rule
